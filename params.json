{
  "name": "JQueryOAuth",
  "tagline": "jQuery OAuth",
  "body": "# jQueryOAuth\r\n\r\n============\r\nA $.ajax wrapper for OAuth 2 access and refresh token management for use in a SPA.\r\n\r\n# What\r\nThis is a library for storing access token client side and use it for $.ajax requests. Secondly, it is a library for\r\nrequesting new access tokens upon expiration.\r\n\r\n# Guide\r\n\r\nI have written an extensive blog post about writing a web app using Lumen that utilizes this library for client side \r\nmanagement of tokens.\r\n\r\n[Building a web app with Lumen web API and OAuth2 authentication](http://esbenp.github.io/2015/05/26/lumen-web-api-oauth-2-authentication/)\r\n\r\n# Dependencies\r\n* [jQuery](https://github.com/jquery/jquery) 1.5+\r\n* [store.js](https://github.com/marcuswestin/store.js) 1.3.17\r\n\r\n# Features\r\n* Stores access token client side using store.js for persistence between refreshes\r\n* Adds authorization header to ajax requests\r\n* Adds CSRF token to header requests if provided to protect access token\r\n* When access token expires all 401 requests are buffered and fired after a new access token is generated by using\r\nrefresh token server side\r\n* Works with AMD modules\r\n\r\n# Installation\r\nCan be installed via bower package\r\n```\r\nbower install --save jquery-oauth\r\n```\r\n\r\n... or by cloning the repository\r\n```\r\ngit clone git@github.com:esbenp/jquery-oauth.git\r\n```\r\n... or by grabbing a zip of the latest release\r\n\r\n# Usage\r\nOAuth has to be implemented server side. If using Laravel, I recommend the great library\r\n[oauth-server-laravel](https://github.com/lucadegasperi/oauth2-server-laravel) by\r\n[Luca Degasperi](https://github.com/lucadegasperi) ([@lucadegasperi](https://twitter.com/lucadegasperi)).\r\n\r\nHave an endpoint that issues access tokens. Remember do NOT send ```client_id``` and ```client_secret``` with the request.\r\nSend the request to a proxy endpoint that sends the request to the OAuth endpoint. Remember do NOT save the refresh\r\ntoken client side. Save this as an encrypted httponly cookie and use a proxy to send this to the OAuth endpoint when\r\nrefreshing access tokens.\r\n\r\n## Example of resource owner implementation in a SPA\r\n#### Somewhere where things are initialised\r\n```javascript\r\ndefine([/*other dependencies,*/ \"jquery-oauth\", function(jqOAuth){\r\n\t/* other initialisation */\r\n\r\n\tvar csrfToken = $(\"input[name='_token']\").val();\t\r\n\r\n\tvar auth = new jqOAuth({\r\n        csrfToken: csrfToken,\r\n        events: {\r\n            login: function() {\r\n                // User is hereby logged in and the \r\n                // access token will be added to subsequent\r\n                // $.ajax calls, until a new token cannot \r\n                // be acquired or auth.logout() is called.\r\n            },\r\n            logout: function() {\r\n                // auth.logout() has been called and the \r\n                // authorization headers are removed from \r\n                // $.ajaxSettings. Tokens are removed from\r\n                // localStorage.\r\n            },\r\n            tokenExpiration: function() {\r\n\t            // this event is fired when 401 calls are \r\n\t            // received from the server. Has to return \r\n\t            // an ajax promise. \r\n\t            // New tokens are set with auth.setAccessToken()\r\n\t            \r\n                return $.post(\"/refresh-token-proxy-endpoint\").success(function(response){\r\n                    auth.setAccessToken(response.accessToken, response.accessTokenExpiration);\r\n                });\r\n            }\r\n        }\r\n    });\r\n});\r\n```\r\n\r\n#### Login form (when form is submitted)\r\n```javascript\r\n$.ajax({\r\n   url: \"/access-token-proxy-endpoint\",\r\n   method: \"POST\",\r\n   data: {\r\n       username: \"username-from-a-form\",\r\n       password: \"password-from-a-form\"\r\n   },\r\n   statusCode: {\r\n       200: function(response) {\r\n           auth.login(response.accessToken, response.accessTokenExpiration);\r\n       },\r\n       401: function() {\r\n           alert(\"The username or password were not correct. Try again.\");\r\n       }\r\n   }\r\n});\r\n```\r\n\r\n#### Logout\r\n```javascript\r\nauth.logout();\r\n```\r\n\r\n# API\r\nThese calls are available through auth\r\n\r\n```javascript\r\ndefine(['jquery-oauth'], function(auth){\r\n    // The access token and expiration in seconds\r\n    // Sets authorization headers and stores tokens\r\n    auth.login(accessToken, accessTokenExpiration);\r\n\r\n   // Removes headers from $.ajax and tokens from localStorage\r\n   auth.logout();\r\n\r\n   // Initialize library\r\n   var auth = new jqOAuth({\r\n       csrfToken: \"token\" //CSRF token,\r\n       events: {\r\n           logout: function(){},\r\n           login:  function(){},\r\n           tokenExpiration: function(){}\r\n       }\t\r\n   });\r\n\r\n   // Sets new tokens - should be used with tokenExpiration event\r\n   auth.setAccessToken(accessToken, accessTokenExpiration);\r\n\r\n   // Checks for tokens\r\n   auth.hasAccessToken();\r\n   auth.hasAccessTokenExpiration();\r\n});\r\n```\r\n\r\n# Thank you\r\nThe library addresses OAuth problems in general. Many of these are outlined in this great article:\r\n[OAuth2 with Angular the right way](http://jeremymarc.github.io/2014/08/14/oauth2-with-angular-the-right-way/)\r\n\r\nAlso, the refresh token functionality takes great inspiration in this great AngularJS library:\r\n[angular-http-auth](https://github.com/witoldsz/angular-http-auth)\r\n\r\nSo thank you [Jeremy Marc](https://github.com/jeremymarc) ([@jeremymarc](https://twitter.com/jeremymarc)) and\r\n[Witold Szczerba](https://github.com/witoldsz) ([@witoldsz](https://twitter.com/witoldsz))\r\n\r\n# License\r\nCopyright Â© 2015 [Esben Petersen](http://github.com/esbenp) & Contributors\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\r\nthe License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an\r\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific\r\nlanguage governing permissions and limitations under the License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}